[conf]
# Compiler to indicate
compiler=g++

# System static libraries, likes -lpthread
# For example: sys_libs=["pthread"]
sys_libs=[]

# User-defined library directories or files, if which contains external static
# files. For example: ext_libs=['/mnt/foo/libs', '/mnt/foo/bar.a'], 
# if /mnt/foo/libs contains some static files, like bar1.a, bar2.a, bar3.a.
#
# TORA will automatically generate references to these files, like:
# -l/mnt/foo/libs/bar1.a -l/mnt/foo/libs/bar2.a -l/mnt/foo/libs/bar3.a
ext_libs=[]

# External headers to include
# For example: includes=['/mnt/foo/head_dir1', '/mnt/foo/head_dir2']
includes=["Triangle"]

# pre-requirement files: especially 
#pre_requires=requirements.json

[src]
# The sources allocated, TORA will search the path, and find out which C/CPP available.
# For example: src_path=['src/path1', 'src/path2']
src_path=["Triangle"]

# Compile flags
# For example: flags=['std=c++11', 'fPIC']
flags=["std=c++11", "fPIC", "Wall"]

# Macro defines
# For example: macros=['CODE=1', 'DEBUG_MODE']
macros=[]


[gen]
# Dedicate the output file type, can be one of [exe, static, share]
type=static

# Output file name, static file will named with .a, shared file should named with .so,
# executable file will named with .exe
name=Triangle

# Compile flags.
# After the intermediate files were generated, it is generally not necessary to use the
# compile flags, but for some special occasions, this function is reserved, please refer
# to the above if you need.
flags=[]

# Project out dir, necessary files will be put to the folder
output_dir=bin

# File packaging, in addition to automatically packaging the generated files, 
# it also allows users to customize the folder to be packaged 
# (usually the folder containing the header file).
# For example: package_dirs=['/mnt/foo/header1', '/mnt/foo/header2']
package_dirs=['Triangle']